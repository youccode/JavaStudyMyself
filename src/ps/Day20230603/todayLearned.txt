
1. 특정한 조건에서만 사용이 가능한 정렬 방법
 - Counting Sort
    - 최대값과 최솟값의 차이가 100만 이하인 경우에서만 사용이 가능한(효율이 있는) Sorting
    - 특히나 정렬하는 값에 같은 값이 많은 경우에 매우 효과적이다.
    - 정렬 방법
        1. 가장 작은 데이터부터 최대 데이터까지 담을 수 있는 array를 하나 만든다.
        2. 데이터를 하나씩 훑어가면서 해당 index의 데이터 값을 증가
        3. 증가된 리스트에서 값이 0인 아닌 것들만 index 값을 출력

    - Counting Sort의 Time Complexity의 경우, O(n + k)이다.
        - 입력 받은 N개의 데이터를 한 번씩 훑으면서 값을 정렬하기 때문에 O(n)을 충족하는데,
        - n의 값보다 n 내부에 있는 최댓값 k가 존재한다면, 그 값을 출력하기 위해 다시 loop를 도는데 이것이 k이므로
          시간복잡도는 O(n+k)가 된다. => k 값이 매우 크다면 k가 시간복잡도를 결정하게 되고, 매우 작다면 무시 가능하다.


2. BufferedWriter를 이용한 bw.write()에 그냥 int를 넣게 될 경우,
   이는 하나의 글자, 즉 Character를 출력하는 method임으로 올바른 출력이 되지 않을 수 있다. 그러므로 ""을 더해줘서 String의 형태로 만들면 올바른 출력이 된다.

3. Java에서  Sorting을 하는 과정에서 시간 초과가 난다면, 알고리즘에 문제가 있는 상황이다.
    - Bubble, Selection, Insert Sorting들의 경우, 모두 Time Complexity가 O(N^2)에 해당
    - 시간 복잡도가 O(N logN )에 해당하는 Sorting은 Heap or Merge Sorting을 이용해야 함.