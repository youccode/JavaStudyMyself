새로 알게 된 progrmming에 대한 지식들

1. Synchronous vs Asynchronous
 - Async is multi-thread, which means operations or programs can run in parallel. Sync is single-thread, so only one operation or program will run at a time.
   Async is non-blocking, which means it will send multiple requests to a server. Sync is blocking — it will only send the server one request at a time and will wait for that request to be answered by the server.
   Async increases throughput because multiple operations can run at the same time. Sync is slower and more methodical.

2. System.out.println의 속도
 - System.out.println의 속도는 결론적으로는 "생각보다 많이 느리다."
 - 내부의 코드를 보았을 때, println의 경우, PrintStream 내부에 있는 method인데, 이는 안정적인 출력을
   및 편의를 위한 것이라고 한다. 내부의 코드를 까보니, 실제로 Synchronized가 걸려있는 것을 확인했다.
   즉, 코드에서 sync가 걸려버리니 속도에 확 브레이크가 걸리는 듯 싶다.

3. System.out.println을 대체해주기 위한 녀석, BufferedWriter

4. Scanner vs BufferedReader
 - Scanner의 경우, 들어온 데이터를 바로바로 사용자에게 넘겨주는 형태이다.
    - 즉, Scanner에 데이터가 들어온다면, Scanner는 무조건 그 값을 넘겨주어야 한다.
    - 그리고 입력받은 데이터를 parsing하여 가져오기 때문에 시간이 조금 더 걸린다.

 - BufferedReader의 경우, 이름 그대로 데이터가 들어온다면 이를 buffer로 넘겨준다.
    - data parsing을 진행하지 않고, String으로 바로 가져온다.
    - Thread safe하다. => multi thread의 상황에서도 사용이 가능하다.
        - Scanner의 경우, 다른 thread에서는 그 값에 접근이 불가능하지만, buffer의 경우 가능함.

5. System.out.println을 대체하기 위한 BufferedWriter
    - bw.write(something) => something을 terminal에 출력한다.
    - bw.flush() => buffer에 남아있는 data를 모두 비워낸다.
    - bw.close() => 사용 종료